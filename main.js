/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  AddJiraPrefixModal: () => AddJiraPrefixModal,
  default: () => StupidJira
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_view = require("@codemirror/view");
var import_language = require("@codemirror/language");
var import_state = require("@codemirror/state");
var import_obsidian2 = require("obsidian");
var DEFAULT_SETTINGS = {
  useStyles: true,
  prefixList: ["HD"],
  baseURL: "https://jira.example.com"
  // clientURL: "https://jira.example.com/helpdesk",
};
var StupidJiraSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    let inTimeOut = false;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Stupid Jira Settings" });
    new import_obsidian.Setting(containerEl).setName("Styles").setDesc("Use Stupid Jira styles to format the linked tags.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.useStyles).onChange(async (value) => {
        this.plugin.settings.useStyles = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Jira Base URL").setDesc("The base URL for your jira agent view.").addTextArea(
      (text) => text.setPlaceholder("https://jira.example.com").setValue(this.plugin.settings.baseURL).onChange(
        (0, import_obsidian2.debounce)(async (value) => {
          this.plugin.settings.baseURL = value.replace(
            /\/$/,
            ""
          );
          await this.plugin.saveSettings();
          text.setValue(this.plugin.settings.baseURL);
        }, 500)
      )
      // .onChange(async (value) => {
      // 	// this.plugin.settings.baseURL = value;
      // 	this.plugin.settings.baseURL =
      // 		this.plugin.settings.baseURL.replace(/\/$/, "");
      // 	await this.plugin.saveSettings();
      // })
    );
    new import_obsidian.Setting(containerEl).setName("Target Prefixes").setDesc("Add the prefixes you want to target.").addButton(
      (btn) => btn.setButtonText("Add Prefix").setCta().onClick(async () => {
        new AddJiraPrefixModal(this.app, (result) => {
          this.plugin.settings.prefixList.push(result);
          this.display();
          this.plugin.saveSettings();
        }).open();
      })
    );
    const prefixContainer = containerEl.createDiv({
      cls: "os80-prefix-container "
    });
    prefixContainer.id = "prefixContainer";
    for (const prefix of this.plugin.settings.prefixList) {
      const pill = prefixContainer.createDiv({
        cls: "os80-pill"
      });
      pill.createSpan({
        text: prefix,
        cls: "os80-pill-text"
      });
      new import_obsidian.ButtonComponent(pill).setIcon("trash-2").setClass("clickable-icon").setClass("os80-clickable-icon").onClick(() => {
        const index = this.plugin.settings.prefixList.indexOf(prefix);
        this.plugin.settings.prefixList.indexOf(prefix);
        if (index > -1) {
          this.plugin.settings.prefixList.splice(index, 1);
          this.plugin.saveSettings();
          this.display();
        }
      });
    }
  }
};
var AddJiraPrefixModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "What's the ticket prefix?" });
    contentEl.createEl("p", {
      text: 'Example: If your tickets are formatted HD-1080, use "HD"'
    });
    new import_obsidian.Setting(contentEl).setName("Prefix").addText(
      (text) => text.onChange((value) => {
        this.result = value;
      })
    );
    new import_obsidian.Setting(contentEl).addButton(
      (btn) => btn.setButtonText("Submit").setCta().onClick(() => {
        this.close();
        this.onSubmit(this.result);
      })
    );
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
var JiraTagWidget = class extends import_view.WidgetType {
  constructor(key, settings) {
    super();
    this.key = key;
    this.settings = settings;
  }
  toDOM() {
    return new JiraTagFactory(this.settings).getElement(this.key);
  }
  toHTML() {
    return new JiraTagFactory(this.settings).getHTML(this.key);
  }
};
var JiraTagFactory = class {
  constructor(settings) {
    this.settings = settings;
  }
  getClassName() {
    return this.settings.useStyles ? "os80-sjp" : "";
  }
  getMark() {
    return import_view.Decoration.mark({
      inclusive: true,
      class: this.getClassName(),
      tagName: "a"
    });
  }
  getWidget(key) {
    return new JiraTagWidget(key, this.settings);
  }
  getElement(key) {
    const element = document.createElement("a");
    element.className = this.getClassName();
    element.innerText = key;
    element.href = `${this.settings.baseURL}/browse/${key}`;
    return element;
  }
  getHTML(key) {
    return this.getElement(key).outerHTML;
  }
};
var getStupidJiraStateField = (settings) => import_state.StateField.define({
  create() {
    return import_view.Decoration.none;
  },
  update(prev, transaction) {
    const isSourceMode = !transaction.state.field(
      import_obsidian.editorLivePreviewField
    );
    if (isSourceMode)
      return import_view.Decoration.none;
    const indices = {};
    const ignoreRanges = [];
    const builder = new import_state.RangeSetBuilder();
    let prefixRegex = new RegExp(
      `(\\b${settings.prefixList.join("|")})-\\d+\\b`,
      "g"
    );
    const activeNode = transaction.state.selection.main;
    for (const range of transaction.state.selection.ranges) {
      ignoreRanges.push([range.from, range.to]);
    }
    (0, import_language.syntaxTree)(transaction.state).iterate({
      enter(node) {
        if (node.name.match(
          /^hmd-table-sep|^header|^quote|^list|formatting/
        ))
          return;
        const nodeText = transaction.state.doc.sliceString(
          node.from,
          node.to
        );
        if (node.name.match(
          /comment|hashtag|code|escape|strikethrough|callout|quote/
        )) {
          ignoreRanges.push([node.from, node.to]);
        }
        const matches = nodeText.match(prefixRegex);
        let lastIndex = 0;
        if (matches) {
          for (const match of matches) {
            const from = node.from + nodeText.indexOf(match, lastIndex);
            const to = from + match.length;
            lastIndex = to;
            if (from <= activeNode.from && activeNode.to <= to) {
              continue;
            }
            indices[from] = indices[from] || [];
            indices[from].push(
              import_view.Decoration.replace({
                widget: new JiraTagWidget(match, settings)
              }).range(from, to)
            );
          }
        }
      }
    });
    const uniqueIgnoreRanges = Array.from(
      new Set(ignoreRanges.map((range) => range.join("-")))
    ).map((range) => range.split("-").map(Number));
    for (const from in indices) {
      for (const decoration of indices[from]) {
        if (!uniqueIgnoreRanges.some(
          (range) => range[0] <= decoration.from && range[1] >= decoration.to
        )) {
          builder.add(
            decoration.from,
            decoration.to,
            decoration.value
          );
        }
      }
    }
    return builder.finish();
  },
  provide(field) {
    return import_view.EditorView.decorations.from(field);
  }
});
var stupidJiraPostProcessor = (settings) => (element, context) => {
  const replaceInnerHTMLforJiraTag = (el) => {
    const processStupidJiratag = (node) => {
      var _a, _b, _c, _d;
      const ignoreElements = ["CODE", "PRE", "DEL"];
      if (ignoreElements.includes(node.nodeName) || node.classList.contains("tag") || node.classList.contains("cm-comment"))
        return node.outerHTML;
      const prefixRegex = new RegExp(
        `(\\b${settings.prefixList.join("|")})-\\d+\\b`,
        "g"
      );
      let newInnerHTML = "";
      for (let childNode of Array.from(node.childNodes)) {
        if (childNode.nodeType === Node.TEXT_NODE) {
          const matches = (_a = childNode.nodeValue) == null ? void 0 : _a.match(prefixRegex);
          if (matches) {
            let lastMatchIndex = 0;
            for (const match of matches) {
              const matchIndex = (_b = childNode.nodeValue) == null ? void 0 : _b.indexOf(
                match,
                lastMatchIndex
              );
              const jiraTag = new JiraTagWidget(
                match,
                settings
              );
              if (matchIndex) {
                const slice = (_c = childNode.nodeValue) == null ? void 0 : _c.slice(
                  lastMatchIndex,
                  matchIndex
                );
                newInnerHTML += slice;
                lastMatchIndex = matchIndex + match.length;
              } else {
                lastMatchIndex = match.length;
              }
              newInnerHTML += jiraTag.toHTML();
            }
            newInnerHTML += (_d = childNode.nodeValue) == null ? void 0 : _d.slice(lastMatchIndex);
          } else {
            newInnerHTML += childNode.nodeValue;
          }
        } else if (childNode.nodeType === Node.ELEMENT_NODE) {
          newInnerHTML += processStupidJiratag(
            childNode
          );
        }
      }
      node.innerHTML = newInnerHTML;
      return node.outerHTML;
    };
    el.innerHTML = processStupidJiratag(el);
  };
  const selector = "p,div.callout-title-inner,td,div.table-cell-wrapper,li,h1,h2,h3,h4,h5,h6";
  if (element.matches(selector)) {
    replaceInnerHTMLforJiraTag(element);
  } else {
    for (const el of element.findAll(selector)) {
      if (el.innerText) {
        replaceInnerHTMLforJiraTag(el);
      }
    }
  }
};
var StupidJira = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new StupidJiraSettingTab(this.app, this));
    if (this.settings.prefixList.length <= 0) {
      new import_obsidian.Notice(
        `Stupid Jira Plugin:ds You don't have any jira prefixes added. Add one in settings`
      );
      return;
    }
    this.settings.regex = new RegExp(
      `(\\b${this.settings.prefixList.join("|")})-\\d+\\b`,
      "g"
    );
    this.registerEditorExtension(getStupidJiraStateField(this.settings));
    this.registerMarkdownPostProcessor(
      stupidJiraPostProcessor(this.settings)
    );
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
